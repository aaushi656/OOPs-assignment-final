{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**PYTHON OOPs QUESTIONS**"
      ],
      "metadata": {
        "id": "K9IgzSQfBldM"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Theory Questions"
      ],
      "metadata": {
        "id": "iHwe78xcBmLV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 1:** What is Object-Oriented Programming (OOP)+"
      ],
      "metadata": {
        "id": "IwcQThgyCUNn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** OOP is a programming paradigm that organizes software design around objects rather than functions and logic. It focuses on creating reusable code through concepts like encapsulation, inheritance, and polymorphism."
      ],
      "metadata": {
        "id": "fBd2xn2rC03h"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 2:**What is a class in OOP+?"
      ],
      "metadata": {
        "id": "_hh82zX_DJ58"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**\n",
        "   A class is a blueprint or template for creating objects. It defines the attributes (data) and methods (functions) that the objects created from the class will have.\n",
        "   "
      ],
      "metadata": {
        "id": "svRnwxJLDmfo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 3:**What is an object in OOP+?\n"
      ],
      "metadata": {
        "id": "8DKhxYuwD3cc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**\n",
        "An object is an instance of a class. It's a self-contained component that contains properties and methods needed to make a certain type of data useful."
      ],
      "metadata": {
        "id": "9E4JEQ6nEA8d"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 4:** What is the difference between abstraction and encapsulation+?"
      ],
      "metadata": {
        "id": "RAvzg4ONELX2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** - •Abstraction focuses on hiding complex implementation details and showing only essential features.\n",
        "   - Encapsulation is about bundling data and methods that operate on that data within one unit (class) and restricting access to some components."
      ],
      "metadata": {
        "id": "qI5CASVdEXx7"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 5:** What are dunder methods in Python+?"
      ],
      "metadata": {
        "id": "GGIb-ku5E55I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** Dunder methods (double underscore methods) are special methods in Python that start and end with double underscores (e.g., `__init__`, `__str__`). They allow operator overloading and other special behaviors."
      ],
      "metadata": {
        "id": "N6eM8tFVFQ6U"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 6:** Explain the concept of inheritance in OOPH."
      ],
      "metadata": {
        "id": "gl-3hvcKFw6k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** Inheritance allows a class (child) to inherit attributes and methods from another class (parent). It promotes code reusability and establishes relationships between classes."
      ],
      "metadata": {
        "id": "bV5CT8JhF-Li"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 7:** What is polymorphism in OOP+?\n"
      ],
      "metadata": {
        "id": "MqPC67wBGJPc"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables methods to do different things based on the object that is acting upon them."
      ],
      "metadata": {
        "id": "ejXBxAdTGcu6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 8:** How is encapsulation achieved in Python?"
      ],
      "metadata": {
        "id": "ppJ6f5tfGjnI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** In Python, encapsulation is achieved by using private variables (prefixed with `_` or `__`) and providing public methods to access and modify them (getters and setters)."
      ],
      "metadata": {
        "id": "2jUjZNZ5Gsv1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 9:**What is a constructor in Python+?"
      ],
      "metadata": {
        "id": "kQNs9P_aG3-_"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**A constructor is a special method (`__init__`) that is automatically called when an object is created. It's used to initialize the object's attributes."
      ],
      "metadata": {
        "id": "ES6__HF3HIWJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 10:**What are class and static methods in Python+ ?"
      ],
      "metadata": {
        "id": "wA7aH-yVHXNG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** - Class methods (`@classmethod`) take the class as first argument (cls) and can access class variables.\n",
        "    - Static methods (`@staticmethod`) don't take any special first argument and behave like regular functions but belong to the class's namespace.\n",
        "     "
      ],
      "metadata": {
        "id": "zA6PHFBEHmoS"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 11:** What is method overloading in Python+?"
      ],
      "metadata": {
        "id": "WuCFuCtmHx55"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** Python doesn't support traditional method overloading (same name, different parameters). Instead, you can use default arguments or variable-length arguments to achieve similar functionality."
      ],
      "metadata": {
        "id": "-XqseLnIH6ow"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 12:** What is method overriding in OOP+?"
      ],
      "metadata": {
        "id": "p3F5gAgLIFBG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** Method overriding occurs when a child class provides a specific implementation of a method that is already defined in its parent class."
      ],
      "metadata": {
        "id": "cJFlPEkFILpW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 13:**What is a property decorator in Python+?"
      ],
      "metadata": {
        "id": "p4oxugXrISYF"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** The `@property` decorator allows a method to be accessed like an attribute, enabling getter, setter, and deleter functionality."
      ],
      "metadata": {
        "id": "3STHhkNEIZOK"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 14:** Why is polymorphism important in OOP+?"
      ],
      "metadata": {
        "id": "b6wEvJLWIhPo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** Polymorphism allows for flexibility and extensibility in code. It enables writing more generic and reusable code that can work with objects of different classes."
      ],
      "metadata": {
        "id": "abnvBay-IqJp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 15:** What is an abstract class in Python+?"
      ],
      "metadata": {
        "id": "D1sC2TEUIvsI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:** An abstract class is a class that contains one or more abstract methods (methods declared but not implemented). It cannot be instantiated and requires subclasses to implement the abstract methods."
      ],
      "metadata": {
        "id": "1PCcDFnqI2w8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 16:** What are the advantages of OOP+?"
      ],
      "metadata": {
        "id": "v27215yOI8M8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**\n",
        "•Code reusability\n",
        "•Modularity\n",
        "•Better organization\n",
        "•Easier maintenance\n",
        "•Data hiding/security\n",
        "•Real-world modeling"
      ],
      "metadata": {
        "id": "eJjW2KOZJDPW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 17:** What is the difference between a class variable and an instance variable+?"
      ],
      "metadata": {
        "id": "Onhn2ayCKRiT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**variable and an instance variable?**\n",
        "    - Class variables are shared by all instances of the class.\n",
        "        - Instance variables are unique to each instance.\n",
        "        "
      ],
      "metadata": {
        "id": "7L8vDUc_Kbep"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 18:**What is multiple inheritance in Python+?"
      ],
      "metadata": {
        "id": "WK9Q650-Khma"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**Multiple inheritance allows a class to inherit from more than one parent class. Python supports this through the Method Resolution Order (MRO)."
      ],
      "metadata": {
        "id": "qsZdOTfoKsMd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 19:**Explain the purpose of ‘’__str__’ and ‘__repr__’ ‘ methods in PythonH."
      ],
      "metadata": {
        "id": "EZyT7hMlK118"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**`__repr__` methods in Python.**\n",
        "    - `__str__`: Returns a human-readable string representation of the object (for end users).\n",
        "        - `__repr__`: Returns an unambiguous string representation of the object (for developers, ideally can be used to recreate the object)."
      ],
      "metadata": {
        "id": "OGjDzPetK89P"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 20:** What is the significance of the ‘super()’ function in Python+?"
      ],
      "metadata": {
        "id": "ZhpN_IFILDa-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**     `super()` allows you to call methods from the parent class, which is especially useful in inheritance scenarios to avoid hardcoding the parent class name."
      ],
      "metadata": {
        "id": "5mpk9Iz2LJ28"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 21:**What is the significance of the __del__ method in Python?"
      ],
      "metadata": {
        "id": "AY5ZAxl2LPpt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**`__del__` is a destructor method called when an object is about to be destroyed. It's used to perform cleanup operations."
      ],
      "metadata": {
        "id": "xg6I4VwJLZNT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 22:**What is the difference between @staticmethod and @classmethod in Python?"
      ],
      "metadata": {
        "id": "N7j68eStLfD8"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**  - `@classmethod` takes the class (cls) as first argument and can modify class state.\n",
        "    - `@staticmethod` doesn't take any special first argument and can't modify class or instance state.\n",
        "    "
      ],
      "metadata": {
        "id": "J2BQfbnALmn6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 23:**How does polymorphism work in Python with inheritance+?"
      ],
      "metadata": {
        "id": "luLdmSXDLtLC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**Polymorphism with inheritance allows child classes to override parent class methods, so the same method name can behave differently based on which object calls it."
      ],
      "metadata": {
        "id": "l-b6QadgLzq2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 24:**What is method chaining in Python OOP+?"
      ],
      "metadata": {
        "id": "3WXl-4WPL6Cr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**Method chaining is a technique where multiple methods are called on the same object in sequence, with each method returning the object itself (typically through `return self`)."
      ],
      "metadata": {
        "id": "ymI2EbDaMAIx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 25:**What is the purpose of the __call__ method in Python?"
      ],
      "metadata": {
        "id": "hTOOYXnwMF9I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Answer:**The `__call__` method allows an instance of a class to be called as a function. When defined, you can use the object like a function (e.g., `obj()`)."
      ],
      "metadata": {
        "id": "FyqGR7RcMNtC"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Practical Questions"
      ],
      "metadata": {
        "id": "4kVMnTbBpgS2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 1:**Create a parent class Animal with a method speak() that prints a generic message. Create a child class Dog\n",
        "that overrides the speak() method to print \"Bark!\".\n"
      ],
      "metadata": {
        "id": "RIVDnUBgpq4J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class Animal:\n",
        "def speak(self):\n",
        "print(\"Animal speaks\")\n",
        "class Dog(Animal):\n",
        "def speak(self):\n",
        "print(\"Bark!\")"
      ],
      "metadata": {
        "id": "H2ws4Rozp7aI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 2:**Write a program to create an abstract class Shape with a method area(). Derive classes Circle and Rectangle\n",
        "from it and implement the area() method in both."
      ],
      "metadata": {
        "id": "3mDeS5H7skTt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "from abc import ABC, abstractmethod\n",
        "\n",
        "  class Shape(ABC):\n",
        "  @abstractmethod\n",
        "  def area(self):\n",
        "  pass\n",
        "\n",
        "  class Circle(Shape):\n",
        "  def __init__(self, radius):\n",
        "  self.radius = radius\n",
        "\n",
        "  def area(self):\n",
        "  return 3.14 * self.radius **2\n",
        "  class Rectangle(Shape):\n",
        "  def __init__(self, length, width):\n",
        "  self.length = length\n",
        "  self.width = width\n",
        "\n",
        "  def area(self):\n",
        "  return self.length * self.width"
      ],
      "metadata": {
        "id": "fCgA2Z91tRXy"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 3:**Implement a multi-level inheritance scenario where a class Vehicle has an attribute type. Derive a class Car\n",
        "and further derive a class ElectricCar that adds a battery attribute."
      ],
      "metadata": {
        "id": "BOHfumR5vHl-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "  class Vehicle:\n",
        "  def __init__(self, type):\n",
        "  self.type = type\n",
        "\n",
        "  class Car(Vehicle):\n",
        "  def __init__(self, type, brand):\n",
        "  super().__init__(type)\n",
        "  self.brand = brand\n",
        "\n",
        "  class ElectricCar(Car):\n",
        "  def __init__(self, type, brand, battery):\n",
        "  super().__init__(type, brand)\n",
        "  self.battery = battery"
      ],
      "metadata": {
        "id": "uBP6AK6kvOsl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 4:**Demonstrate polymorphism by creating a base class Bird with a method fly(). Create two derived classes\n",
        "Sparrow and Penguin that override the fly() method."
      ],
      "metadata": {
        "id": "Ue1oQJiqwfR4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "  class Bird:\n",
        "  def fly(self):\n",
        "  print(\"Bird can fly\")\n",
        "\n",
        "  class Sparrow(Bird):\n",
        "  def fly(self):\n",
        "  print(\"Sparrow flies fast\")\n",
        "\n",
        "  class Penguin(Bird):\n",
        "  def fly(self):\n",
        "  print(\"Penguin can't fly\")"
      ],
      "metadata": {
        "id": "hd9MlteYwpol"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 5:**Write a program to demonstrate encapsulation by creating a class BankAccount with private attributes\n",
        "balance and methods to deposit, withdraw, and check balance."
      ],
      "metadata": {
        "id": "eHd4a8K7xs5M"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "6KwZ7-5H1FFL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "   class BankAccount:\n",
        "   def __init__(self):\n",
        "   self.__balance = 0\n",
        "\n",
        "   def deposit(self, amount):\n",
        "   self.__balance += amount\n",
        "\n",
        "   def withdraw(self, amount):\n",
        "   if amount <= self.__balance:\n",
        "   self.__balance -= amount\n",
        "   else:\n",
        "   print(\"Insufficient balance\")\n",
        "   def check_balance(self):\n",
        "   return self.__balance"
      ],
      "metadata": {
        "id": "k9Q96LoNxzW_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 6:**Demonstrate runtime polymorphism using a method play() in a base class Instrument. Derive classes Guitar\n",
        "and Piano that implement their own version of play()."
      ],
      "metadata": {
        "id": "PwPp2VEFy2Ze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "   class Instrument:\n",
        "   def play(self):\n",
        "   print(\"Instrument plays\")\n",
        "   class Guitar(Instrument):\n",
        "   def play(self):\n",
        "   print(\"Guitar strums\")\n",
        "\n",
        "   class Piano(Instrument):\n",
        "   def play(self):\n",
        "   print(\"Piano keys play\")"
      ],
      "metadata": {
        "id": "IaUEcWXDy8qH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 7:**Create a class MathOperations with a class method add_numbers() to add two numbers and a static\n",
        "method subtract_numbers() to subtract two numbers."
      ],
      "metadata": {
        "id": "BcNqVPYQzlW5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "   class MathOperations:\n",
        "   @classmethod\n",
        "   def add_numbers(cls, a, b):\n",
        "   return a + b\n",
        "\n",
        "   @staticmethod\n",
        "   def subtract_numbers(a, b):\n",
        "   return a - b"
      ],
      "metadata": {
        "id": "xqGPeA89zsPL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 8:**Implement a class Person with a class method to count the total number of persons created."
      ],
      "metadata": {
        "id": "siaM5EJp0GHP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    class Person:\n",
        "    count = 0\n",
        "    def __init__(self):\n",
        "    Person.count += 1\n",
        "\n",
        "    @classmethod\n",
        "    return cls.count"
      ],
      "metadata": {
        "id": "oYp2Wv6D0MOA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 9:**Write a class Fraction with attributes numerator and denominator. Override the str method to display the\n",
        "fraction as \"numerator/denominator\"."
      ],
      "metadata": {
        "id": "xKkMRUah08XY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    class Fraction:\n",
        "    def __init__(self, numerator, denominator):\n",
        "    self.numerator = numerator\n",
        "    self.denominator = denominator\n",
        "\n",
        "    def __str__(self):\n",
        "    return f\"{self.numerator}/{self.denominator}\""
      ],
      "metadata": {
        "id": "l7KX9LrI1GIo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 10:**Demonstrate operator overloading by creating a class Vector and overriding the add method to add two\n",
        "vectors."
      ],
      "metadata": {
        "id": "r-axQMb11kBG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    class Vector:\n",
        "    def __init__(self, x, y):\n",
        "    self.x = x\n",
        "    self.y = y\n",
        "\n",
        "    def __add__(self, other):\n",
        "    return Vector(self.x + other.x, self.y + other.y)\n",
        "\n",
        "    def __str__(self):\n",
        "    return f\"Vector({self.x}, {self.y})\""
      ],
      "metadata": {
        "id": "a9GtJ5ZH1wWV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 11:**Create a class Person with attributes name and age. Add a method greet() that prints \"Hello, my name is\n",
        "{name} and I am {age} years old.\""
      ],
      "metadata": {
        "id": "Cch8wKbs2S50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "     class Person:\n",
        "     def __init__(self, name, age):\n",
        "     self.name = name\n",
        "     self.age = age\n",
        "\n",
        "     def greet(self):\n",
        "     print(f\"Hello, my name is {self.name} and I am {self.age} years old.\")"
      ],
      "metadata": {
        "id": "STx-XVSF2cXe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 12:**Implement a class Student with attributes name and grades. Create a method average_grade() to compute\n",
        "the average of the grades."
      ],
      "metadata": {
        "id": "YtSuNeE-3ODw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "  class Student:\n",
        "  def __init__(self, name, grades):\n",
        "  self.name = name\n",
        "  self.grades = grades\n",
        "\n",
        "  def average_grade(self):\n",
        "  return sum(self.grades) / len(self.grades)"
      ],
      "metadata": {
        "id": "ReW876yj3Uht"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 13:**Create a class Rectangle with methods set_dimensions() to set the dimensions and area() to calculate the\n",
        "area."
      ],
      "metadata": {
        "id": "Q5dtcV8m35z8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "  class Rectangle:\n",
        "  def set_dimensions(self, length, width):\n",
        "  self.length = length\n",
        "  self.width = width\n",
        "\n",
        "  def area(self):\n",
        "  return self.length * self.width"
      ],
      "metadata": {
        "id": "-WZpKKhY4Ege"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 14:**Create a class Employee with a method calculate_salary() that computes the salary based on hours worked\n",
        "and hourly rate. Create a derived class Manager that adds a bonus to the salary."
      ],
      "metadata": {
        "id": "g-X15LYF4jGi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    class Employee:\n",
        "    def __init__(self, hours_worked, hourly_rate):\n",
        "    self.hours_worked = hours_worked\n",
        "    self.hourly_rate = hourly_rate\n",
        "\n",
        "    def calculate_salary(self):\n",
        "    return self.hours_worked * self.hourly_rate\n",
        "\n",
        "    class Manager(Employee):x\n",
        "    def __init__(self, hours_worked, hourly_rate, bonus):\n",
        "    super().__init__(hours_worked, hourly_rate)\n",
        "    self.bonus = bonus\n",
        "\n",
        "    def calculate_salary(self):\n",
        "    return super().calculate_salary() + self.bonus"
      ],
      "metadata": {
        "id": "N2CIsLPv42lt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 15:**Create a class Product with attributes name, price, and quantity. Implement a method total_price() that\n",
        "calculates the total price of the product."
      ],
      "metadata": {
        "id": "4xHEozwe5pnN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    class Product:\n",
        "    def __init__(self, name, price, quantity):\n",
        "    self.name = name\n",
        "    self.price = price\n",
        "    self.quantity = quantity\n",
        "\n",
        "    def total_price(self):\n",
        "    return self.price * self.quantity"
      ],
      "metadata": {
        "id": "26OeYFZl5y9E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 16:**Create a class Animal with an abstract method sound(). Create two derived classes Cow and Sheep that\n",
        "implement the sound() method."
      ],
      "metadata": {
        "id": "1RcMPRSL6Vlc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "    from abc import ABC, abstractmethod\n",
        "\n",
        "    class Animal(ABC):\n",
        "    @abstractmethod\n",
        "    def sound(self):\n",
        "    pass\n",
        "\n",
        "    class Cow(Animal):\n",
        "    def sound(self):\n",
        "    print(\"Moo\")\n",
        "\n",
        "    class Sheep(Animal):\n",
        "    def sound(self):\n",
        "    print(\"Baa\")"
      ],
      "metadata": {
        "id": "HWyUMVJh6hap"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 17:**Create a class Book with attributes title, author, and year_published. Add a method get_book_info() that\n",
        "returns a formatted string with the book's details."
      ],
      "metadata": {
        "id": "DKMbLyvc7GKL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "      class Book:\n",
        "      def __init__(self, title, author, year_published):\n",
        "      self.title = title\n",
        "      self.author = author\n",
        "      self.year_published = year_published\n",
        "\n",
        "      def get_book_info(self):\n",
        "      return f\"'{self.title}' by {self.author}, published in {self.year_published}\""
      ],
      "metadata": {
        "id": "dlk35Jg37MwM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Question 18:**Create a class House with attributes address and price. Create a derived class Mansion that adds an\n",
        "attribute number_of_rooms."
      ],
      "metadata": {
        "id": "G7dfFit17363"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "**Answer:**\n",
        "     class House:\n",
        "     def __init__(self, address, price):\n",
        "     self.address = address\n",
        "     self.price = price\n",
        "\n",
        "     class Mansion(House):\n",
        "     def __init__(self, address, price, number_of_rooms):\n",
        "     super().__init__(address, price)\n",
        "     self.number_of_rooms = number_of_rooms"
      ],
      "metadata": {
        "id": "fqxqe05l796o"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}